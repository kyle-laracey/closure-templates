/*
 * Copyright 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.template.soy.styleheaders;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import com.google.template.soy.jssrc.dsl.JsDoc;
import com.google.template.soy.jssrc.internal.JsCodeBuilder;
import com.google.template.soy.soytree.AbstractSoyNodeVisitor;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.SoyFileSetNode;
import com.google.template.soy.soytree.SoyNode;
import java.util.ArrayList;
import java.util.List;

/**
 * Visitor for generating CSS pinto mod files. For each Soy src file, we generate a tiny JS file
 * that just has an @pintomodule and an @requirecss on the generated Sass file for the Soy file;
 * this create a pinto module for the CSS needed by that Soy file.
 *
 * <p>The return value is a list of strings, each string being the content of one generated JS pinto
 * mod file (corresponding to one Soy file).
 */
public class GenCssPintoModFileVisitor extends AbstractSoyNodeVisitor<List<String>> {

  /** The contents of the generated JS files. */
  private List<String> jsFilesContents;

  /** The CodeBuilder to build the current JS file being generated (during a run). */
  @VisibleForTesting JsCodeBuilder jsCodeBuilder;

  public GenCssPintoModFileVisitor() {}

  public ImmutableList<String> gen(SoyFileSetNode node) {
    jsFilesContents = new ArrayList<>();
    jsCodeBuilder = null;
    visit(node);
    return ImmutableList.copyOf(jsFilesContents);
  }

  /** @deprecated Call {@link #gen} instead. */
  @Override
  @Deprecated
  public final List<String> exec(SoyNode node) {
    throw new UnsupportedOperationException();
  }

  // -----------------------------------------------------------------------------------------------
  // Implementations for specific nodes.

  @Override
  protected void visitSoyFileSetNode(SoyFileSetNode node) {
    for (SoyFileNode soyFile : node.getChildren()) {
      visit(soyFile);
    }
  }

  /** Returns a new CodeBuilder to create the contents of a file with. */
  protected JsCodeBuilder createCodeBuilder() {
    return new JsCodeBuilder();
  }

  /** Returns the CodeBuilder used for generating file contents. */
  protected JsCodeBuilder getJsCodeBuilder() {
    return jsCodeBuilder;
  }

  /**
   * Example:
   *
   * <pre>
   * // This file was automatically generated from my-templates.soy.
   * // Please don't edit this file by hand.
   *
   * if (typeof boo == 'undefined') { var boo = {}; }
   * if (typeof boo.foo == 'undefined') { boo.foo = {}; }
   *
   * ...
   * </pre>
   */
  @Override
  protected void visitSoyFileNode(SoyFileNode node) {
    StringBuilder file = new StringBuilder();

    file.append("// This file was automatically generated by the Soy compiler.\n")
        .append("// Please don't edit this file by hand.\n")
        // This "source" comment makes Code Search link the gencode to the Soy source:
        .append("// source: ")
        .append(node.getFilePath().path())
        .append('\n');

    if (node.getConstants().isEmpty()
        && node.getExterns().isEmpty()
        && node.getTemplates().isEmpty()) {
      // Special support for empty Soy files created with NamespaceDeclaration.EMPTY.
      jsFilesContents.add(file.toString());
      jsCodeBuilder = null;
      return;
    }

    // File overview, with @pintomodule and @requirecss on the generated Sass file for this Soy
    // file.
    file.append("\n");
    String fileOverviewDescription =
        "Pintomodule for CSS needed by: " + node.getFilePath().path() + ".";
    JsDoc.Builder jsDocBuilder = JsDoc.builder();
    jsDocBuilder.addAnnotation("fileoverview", fileOverviewDescription);

    if (node.getDelPackageName() != null) {
      jsDocBuilder.addParameterizedAnnotation("modName", node.getDelPackageName());
    }
    jsDocBuilder.addAnnotation("pintomodule");

    // For my/dir/foo.soy, the generated sass file is ./foo.soy.scss. We need to @requirecss without
    // the scss file extension, though, so we can just use the soy file name.
    jsDocBuilder.addAnnotation("requirecss", "{ ./" + node.getFilePath().fileName() + "}");
    file.append(jsDocBuilder.build());

    // Declare the goog module, which is: 'namespace.csspinto'.
    file.append("\ngoog.module('").append(node.getNamespace()).append(".csspinto" + "');");
    file.append("\n\n");

    jsFilesContents.add(file.toString());
    jsCodeBuilder = null;
  }
}
